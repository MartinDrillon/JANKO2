#include "manual_thresholds.h"
#include <Arduino.h>
#include "calibration.h" // for threshold related runtime context (assumed)

namespace ManualThresholds {

static constexpr int kMinSwingForValidity = 50; // High must be >= Low + 50
static bool gEnabled = false;

// Full 8x16 table with default {720,880}
const Entry kTable[N_MUX][N_CH] = {
/* MUX 0 */ { /* CH00 */ {720,880}, /* CH01 */ {720,880}, /* CH02 */ {720,880}, /* CH03 */ {720,880},
              /* CH04 */ {720,880}, /* CH05 */ {720,880}, /* CH06 */ {720,880}, /* CH07 */ {720,880},
              /* CH08 */ {720,880}, /* CH09 */ {720,880}, /* CH10 */ {720,880}, /* CH11 */ {720,880},
              /* CH12 */ {720,880}, /* CH13 */ {720,880}, /* CH14 */ {720,880}, /* CH15 */ {720,880} },
/* MUX 1 */ { /* CH00 */ {720,880}, /* CH01 */ {720,880}, /* CH02 */ {720,880}, /* CH03 */ {720,880},
              /* CH04 */ {720,880}, /* CH05 */ {720,880}, /* CH06 */ {720,880}, /* CH07 */ {720,880},
              /* CH08 */ {720,880}, /* CH09 */ {720,880}, /* CH10 */ {720,880}, /* CH11 */ {720,880},
              /* CH12 */ {720,880}, /* CH13 */ {720,880}, /* CH14 */ {720,880}, /* CH15 */ {720,880} },
/* MUX 2 */ { /* CH00 */ {720,880}, /* CH01 */ {720,880}, /* CH02 */ {720,880}, /* CH03 */ {720,880},
              /* CH04 */ {720,880}, /* CH05 */ {720,880}, /* CH06 */ {720,880}, /* CH07 */ {720,880},
              /* CH08 */ {720,880}, /* CH09 */ {720,880}, /* CH10 */ {720,880}, /* CH11 */ {720,880},
              /* CH12 */ {720,880}, /* CH13 */ {720,880}, /* CH14 */ {720,880}, /* CH15 */ {720,880} },
/* MUX 3 */ { /* CH00 */ {720,880}, /* CH01 */ {720,880}, /* CH02 */ {720,880}, /* CH03 */ {720,880},
              /* CH04 */ {720,880}, /* CH05 */ {720,880}, /* CH06 */ {720,880}, /* CH07 */ {720,880},
              /* CH08 */ {720,880}, /* CH09 */ {720,880}, /* CH10 */ {720,880}, /* CH11 */ {720,880},
              /* CH12 */ {720,880}, /* CH13 */ {720,880}, /* CH14 */ {720,880}, /* CH15 */ {720,880} },
/* MUX 4 */ { /* CH00 */ {720,880}, /* CH01 */ {720,880}, /* CH02 */ {720,880}, /* CH03 */ {720,880},
              /* CH04 */ {720,880}, /* CH05 */ {720,880}, /* CH06 */ {720,880}, /* CH07 */ {720,880},
              /* CH08 */ {720,880}, /* CH09 */ {720,880}, /* CH10 */ {720,880}, /* CH11 */ {720,880},
              /* CH12 */ {720,880}, /* CH13 */ {720,880}, /* CH14 */ {720,880}, /* CH15 */ {720,880} },
/* MUX 5 */ { /* CH00 */ {720,880}, /* CH01 */ {720,880}, /* CH02 */ {720,880}, /* CH03 */ {720,880},
              /* CH04 */ {720,880}, /* CH05 */ {720,880}, /* CH06 */ {720,880}, /* CH07 */ {720,880},
              /* CH08 */ {720,880}, /* CH09 */ {720,880}, /* CH10 */ {720,880}, /* CH11 */ {720,880},
              /* CH12 */ {720,880}, /* CH13 */ {720,880}, /* CH14 */ {720,880}, /* CH15 */ {720,880} },
/* MUX 6 */ { /* CH00 */ {720,880}, /* CH01 */ {720,880}, /* CH02 */ {720,880}, /* CH03 */ {720,880},
              /* CH04 */ {720,880}, /* CH05 */ {720,880}, /* CH06 */ {720,880}, /* CH07 */ {720,880},
              /* CH08 */ {720,880}, /* CH09 */ {720,880}, /* CH10 */ {720,880}, /* CH11 */ {720,880},
              /* CH12 */ {720,880}, /* CH13 */ {720,880}, /* CH14 */ {720,880}, /* CH15 */ {720,880} },
/* MUX 7 */ { /* CH00 */ {720,880}, /* CH01 */ {720,880}, /* CH02 */ {720,880}, /* CH03 */ {720,880},
              /* CH04 */ {720,880}, /* CH05 */ {720,880}, /* CH06 */ {720,880}, /* CH07 */ {720,880},
              /* CH08 */ {720,880}, /* CH09 */ {720,880}, /* CH10 */ {720,880}, /* CH11 */ {720,880},
              /* CH12 */ {720,880}, /* CH13 */ {720,880}, /* CH14 */ {720,880}, /* CH15 */ {720,880} },
};

void setEnabled(bool on) { gEnabled = on; }
bool isEnabled() { return gEnabled; }

void apply(bool enable) {
    gEnabled = enable;
    for (int m = 0; m < N_MUX; ++m) {
        for (int c = 0; c < N_CH; ++c) {
            uint16_t low  = kTable[m][c].low;
            uint16_t high = kTable[m][c].high;

            if (low  > 1023) low  = 1023;
            if (high > 1023) high = 1023;
            if (high < (uint16_t)(low + kMinSwingForValidity)) {
                uint16_t candidate = low + kMinSwingForValidity;
                high = (candidate > 1023) ? 1023 : candidate;
            }

            setManualLow(m, c, low);
            setManualHigh(m, c, high);
            setManualMask(m, c, enable);
        }
    }
}

void print() {
    Serial.println("[ManualThresholds] Table (Low/High):");
    for (int m = 0; m < N_MUX; ++m) {
        Serial.printf("MUX %d: ", m);
        for (int c = 0; c < N_CH; ++c) {
            Serial.printf("(%u/%u)%s", kTable[m][c].low, kTable[m][c].high, (c==N_CH-1)?"":" ");
        }
        Serial.println();
    }
}

} // namespace ManualThresholds
